" Mappings
let mapleader=','
imap jj <Esc>
nmap <Space> :w<cr>
nmap <leader>t :tabnew<cr>
nmap <leader>l :tabn<cr>
nmap <leader>h :tabp<cr>
nmap <leader>d :tab split<cr>
nmap <leader>q :q<cr>
nmap <leader>s :vsplit<cr>
nmap <leader>a <C-w><C-w>
nmap <leader>o <C-o>
nmap <leader>f :Ag<space>

" Copy and paste to clipboard
" set clipboard=unnamedplus

" Quick macro repeat
nmap <leader>r @@


" Remove trailing whitespace
" autocmd BufWritePre * :%s/\s\+$//e

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <leader>c :nohl<CR><C-l>

" Highlight non-breaking spaces
set list
set listchars=nbsp:.

" Toggle between relative and non-relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nmap <silent> <leader>a :call NumberToggle()<CR>
 
set updatetime=300
set signcolumn=number
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

nmap <silent> gp <Plug>(coc-diagnostic-prev)
nmap <silent> gn <Plug>(coc-diagnostic-next)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>af  <Plug>(coc-fix-current)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi :tab split<cr><Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>rn <Plug>(coc-rename)


set expandtab
set shiftwidth=2
set softtabstop=2
set smartindent
set number
set backupdir=~/tmp
set directory=~/tmp

set nocompatible

" Vim Plug
filetype off
call plug#begin()

" let Vundle manage Vundle
" " required!
" Plug 'gmarik/vundle'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
"Plug 'Valloric/YouCompleteMe'
"Plug 'scrooloose/syntastic'
"Plug 'justinmk/vim-sneak'
Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'leafgarland/typescript-vim' " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax
Plug 'jparise/vim-graphql'        " GraphQL syntax
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'chrisbra/Colorizer'

call plug#end()
filetype plugin indent on

" CoC extensions
let g:coc_global_extensions = ['coc-tsserver']

nmap <leader>m :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>
let g:NERDTreeQuitOnOpen = 1

" Improve ctrl-p
let g:ctrlp_map = '<Leader>p'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|dist\|tmp\'
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_user_command =
  \ ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_prompt_mappings = {
  \ 'PrtClearCache()':      ['\'],
  \ 'PrtExit()':            [',', '<esc>', '<c-c>', '<c-g>'],
  \ }

let g:fzf_preview_window = ['up:40%', '\']

autocmd BufEnter * ColorHighlight .

" allow backspacing over everything in insert mode
"
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Remove scratch/preview on movement
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

""" Fix CoC colors
hi Pmenu ctermbg=Blue

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")
